import { createSlice } from '@reduxjs/toolkit';

import { getPropertyDetailsAsync, searchPropertyAsync } from './thunks';
import { SearchPropertyState } from './types';

const initialState: SearchPropertyState = {
  data: [],
  status: 'idle',
};

export const searchPropertiesSlice = createSlice({
  name: 'searchProperties',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearState: (state) => {
        state.data = []
        state.status = 'idle'
      }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(searchPropertyAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(searchPropertyAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.data = action.payload.data;
      })
      .addCase(getPropertyDetailsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getPropertyDetailsAsync.fulfilled, (state, action) => {
        console.log(action.payload)
        const data = action.payload.data.data
        const originalData = state.data[action.payload.id];
        const newData = {
          ...originalData,
          map: originalData.map !== ''? originalData.map: data.map,
          phone: originalData.phone !== ''? originalData.phone: data.phone,
          capacity: originalData.capacity !== ''? originalData.capacity: data.capacity,
        }
        const dataArray = state.data;
        dataArray[action.payload.id] = newData
        state.status = 'idle';
        state.data = dataArray;
      })
  },
});

export default searchPropertiesSlice;
